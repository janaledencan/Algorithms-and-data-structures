#define _CRT_SECURE_NO_WARNINGS
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
typedef struct stog
{
	int sp;
	int polje[100];
} Stog;

int povrh(int, int);
int povrh_stog(Stog*, Stog*, int, int);
void Clear(Stog*);
void Push(Stog*, int);
int Pop(Stog*);
int IsEmpty(Stog*);
void Pushp(int x);
void Popp();
void print();



int main()
{
	Stog *s1, *s2;
	s1 = (Stog*)malloc(sizeof(Stog));
	s2 = (Stog*)malloc(sizeof(Stog));
	time_t t1, t2,t3,t4;
	t1 = clock();
	int a = povrh(4, 2);
	t2 = clock();
	t3 = clock();
	povrh_stog(s1, s2, 4, 2);
	t4 = clock();

	printf("Povrh preko rekurzije: %d\n", povrh(4, 2));
	printf("Povrh preko stoga: %d\n", povrh_stog(s1, s2, 4, 2));
	printf("Vrijeme rekurzije : %d\n", t2 - t1);
	printf("Vrijeme stoga: %d\n",t4-t3);

	free(s1);
	free(s2);
	return 0;
}

int povrh_stog(Stog* s1, Stog* s2, int a, int b)
{
	int n, m;
	Clear(s1);
	Clear(s2);
	Push(s1, a);
	Push(s2, b);
	int povrh = 0;
	do
	{
		n = Pop(s1);
		m = Pop(s2);
		if (m == n || n == 1 || m == 0)
		{
			povrh = povrh + 1;
		}
		else
		{
			Push(s1, n - 1);
			Push(s2, m - 1);
			Push(s1, n - 1);
			Push(s2, m);
		}
	} while (IsEmpty(s1) == 0);

	return povrh;
}

int povrh(int n, int m)
{
	if (m == n || n == 1 || m == 0)
	{
		return 1;
	}
	else
	{
		return povrh(n - 1, m - 1) + povrh(n - 1, m);
	}
}

void Clear(Stog* s)
{
	s->sp = 0;
}

void Push(Stog* s, int x)
{
	s->sp += 1;
	s->polje[s->sp] = x;
}
int Pop(Stog* s)
{
	int x = s->polje[s->sp];
	s->sp = s->sp - 1;
	return x;
}
int IsEmpty(Stog* s)
{
	if (s->sp == 0)
		return 1;
	else return 0;
}


struct Node {
	int x;
	struct Node * next;
};

struct Node *spp = NULL;


void Pushp(int x) {
	struct Node*t = (struct Node*)malloc(sizeof(struct Node));
	t->x = x;
	t->next = spp;
	spp = t;

}

void Popp() {

	struct Node *t = spp;
	if (t == NULL) {
		return;
	}
	t = spp;
	spp = spp->next;
	free(t);

}

void print() {
	struct Node *t = spp;
	printf("Lista je:\n");
	while (t != NULL) {
		printf("%d\n", t->x);
		t = t->next;
	}


}
